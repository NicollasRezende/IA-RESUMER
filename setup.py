#!/usr/bin/env python3
"""
Script de configura√ß√£o inicial do Sistema de Transcri√ß√£o.
"""
import os
import sys
import subprocess
from pathlib import Path
import shutil

def check_python_version():
    """Verifica a vers√£o do Python."""
    print("üîç Verificando vers√£o do Python...")
    if sys.version_info < (3, 8):
        print("‚ùå Python 3.8 ou superior √© necess√°rio!")
        print(f"   Vers√£o atual: {sys.version}")
        return False
    print(f"‚úÖ Python {sys.version_info.major}.{sys.version_info.minor} detectado")
    return True

def check_ffmpeg():
    """Verifica se o FFmpeg est√° instalado."""
    print("\nüîç Verificando FFmpeg...")
    try:
        result = subprocess.run(
            ["ffmpeg", "-version"], 
            capture_output=True, 
            text=True
        )
        if result.returncode == 0:
            print("‚úÖ FFmpeg instalado")
            return True
    except FileNotFoundError:
        pass
    
    print("‚ùå FFmpeg n√£o encontrado!")
    print("   Por favor, instale o FFmpeg:")
    print("   - Ubuntu/Debian: sudo apt install ffmpeg")
    print("   - macOS: brew install ffmpeg")
    print("   - Windows: baixe de https://ffmpeg.org/download.html")
    return False

def create_directories():
    """Cria os diret√≥rios necess√°rios."""
    print("\nüìÅ Criando estrutura de diret√≥rios...")
    
    directories = [
        "data/uploads",
        "data/transcripts",
        "data/temp",
        "logs",
        "tests/fixtures"
    ]
    
    for dir_path in directories:
        Path(dir_path).mkdir(parents=True, exist_ok=True)
        
        # Criar arquivo .gitkeep para manter diret√≥rios vazios no git
        gitkeep = Path(dir_path) / ".gitkeep"
        gitkeep.touch()
    
    print("‚úÖ Diret√≥rios criados")

def setup_environment():
    """Configura o arquivo .env."""
    print("\n‚öôÔ∏è  Configurando ambiente...")
    
    if not Path(".env").exists() and Path(".env.example").exists():
        shutil.copy(".env.example", ".env")
        print("‚úÖ Arquivo .env criado a partir de .env.example")
    else:
        print("‚ÑπÔ∏è  Arquivo .env j√° existe ou .env.example n√£o encontrado")

def install_dependencies():
    """Instala as depend√™ncias do projeto."""
    print("\nüì¶ Instalando depend√™ncias...")
    
    try:
        subprocess.check_call([
            sys.executable, "-m", "pip", "install", 
            "-r", "requirements.txt", "--break-system-packages"
        ])
        print("‚úÖ Depend√™ncias instaladas com sucesso")
        return True
    except subprocess.CalledProcessError:
        print("‚ùå Erro ao instalar depend√™ncias")
        return False

def download_sample_model():
    """Baixa o modelo tiny para teste inicial."""
    print("\nü§ñ Preparando modelo Whisper...")
    print("   O modelo ser√° baixado automaticamente no primeiro uso")
    print("   Modelos dispon√≠veis: tiny (39MB), base (74MB), small (244MB), medium (769MB), large (1.5GB)")
    
    # Opcionalmente, podemos pr√©-baixar o modelo tiny
    response = input("\n   Deseja baixar o modelo 'tiny' agora para teste? (s/N): ")
    if response.lower() == 's':
        try:
            import whisper
            print("   Baixando modelo tiny...")
            whisper.load_model("tiny")
            print("‚úÖ Modelo tiny baixado com sucesso")
        except Exception as e:
            print(f"‚ö†Ô∏è  N√£o foi poss√≠vel baixar o modelo: {e}")

def create_sample_test():
    """Cria um arquivo de teste simples."""
    print("\nüß™ Criando arquivo de teste...")
    
    test_content = '''"""
Teste simples do sistema de transcri√ß√£o.
"""
import sys
from pathlib import Path

sys.path.insert(0, str(Path(__file__).parent.parent))

def test_import():
    """Testa se os m√≥dulos podem ser importados."""
    try:
        from src.core.transcriber import WhisperTranscriber
        from src.core.audio_processor import AudioProcessor
        from src.core.config import WHISPER_CONFIG
        print("‚úÖ Todos os m√≥dulos importados com sucesso!")
        return True
    except ImportError as e:
        print(f"‚ùå Erro ao importar m√≥dulos: {e}")
        return False

if __name__ == "__main__":
    test_import()
'''
    
    test_file = Path("tests/test_setup.py")
    test_file.write_text(test_content)
    print("‚úÖ Arquivo de teste criado")

def main():
    """Fun√ß√£o principal do setup."""
    print("üéôÔ∏è  CONFIGURA√á√ÉO DO SISTEMA DE TRANSCRI√á√ÉO DE √ÅUDIO")
    print("=" * 50)
    
    # Verifica√ß√µes
    if not check_python_version():
        return 1
    
    ffmpeg_ok = check_ffmpeg()
    
    # Configura√ß√µes
    create_directories()
    setup_environment()
    
    # Instala√ß√£o
    if not install_dependencies():
        return 1
    
    # Prepara√ß√µes finais
    download_sample_model()
    create_sample_test()
    
    # Resumo
    print("\n" + "=" * 50)
    print("üìã RESUMO DA INSTALA√á√ÉO")
    print("=" * 50)
    
    print(f"‚úÖ Python: OK")
    print(f"{'‚úÖ' if ffmpeg_ok else '‚ö†Ô∏è '} FFmpeg: {'OK' if ffmpeg_ok else 'Necess√°rio instalar'}")
    print(f"‚úÖ Depend√™ncias: Instaladas")
    print(f"‚úÖ Diret√≥rios: Criados")
    print(f"‚úÖ Ambiente: Configurado")
    
    print("\nüöÄ PR√ìXIMOS PASSOS:")
    print("1. Se o FFmpeg n√£o est√° instalado, instale-o")
    print("2. Execute um teste: python main.py --list-models")
    print("3. Transcreva seu primeiro arquivo: python main.py arquivo.mp3")
    
    print("\nüìö Para mais informa√ß√µes, consulte o README.md")
    print("\n‚ú® Configura√ß√£o conclu√≠da com sucesso!")
    
    return 0

if __name__ == "__main__":
    sys.exit(main())